for(ticker in my_etfs) {
expr = paste0(ticker, "a = adjustOHLC(", ticker, ")")
eval(parse(text=expr))
}
my_etfs_adjusted = paste(my_etfs,'a',sep = '')
all_returns = cbind( ClCl(ARKKa),
ClCl(SDYa),
ClCl(XLFa),
ClCl(GOVTa),
ClCl(HYGa),
ClCl(EWJa),
ClCl(MCHIa),
ClCl(BNOa))
all_returns = as.matrix(na.omit(all_returns))
# Create 3 portfolios.
# Equal weighted /no opinion portfolio
allocation_equal = rep(1/etf_count,etf_count)
# Create bond allocation. 80% in two bond funds. Equal weight placed in the remaining
bond_allocation = .8
non_bond = (1-bond_allocation)/6
allocation_bond_heavy = rep(non_bond,etf_count)
allocation_bond_heavy[c(4,5)] = bond_allocation/2
# Foreign Heavy
foreign_allocation = .8
non_foreign = (1-foreign_allocation)/6
allocation_foreign = rep(non_foreign,etf_count)
allocation_foreign[c(6,7)] = foreign_allocation/3
# Compile three portfolios in a matrix
portfolio_weights = as.data.frame(cbind(allocation_equal,allocation_bond_heavy,allocation_foreign))
# Make sure each of the allocations sum to one
colSums(portfolio_weights) == 1
# Run the simulation!
# Simulation Parameters
initial_capital = 100000
days_in_simulation = 20
simulation_count = 1000
all_ending_wealths = rep(0,simulation_count)
equal_weight_wealths = matrix(rep(0,days_in_simulation* simulation_count),nrow=simulation_count,ncol=days_in_simulation)
bondy_heavy_wealths = matrix(rep(0,days_in_simulation* simulation_count),nrow=simulation_count,ncol=days_in_simulation)
foreign_heavy_wealths = matrix(rep(0,days_in_simulation* simulation_count),nrow=simulation_count,ncol=days_in_simulation)
for (simulation_num in 1:simulation_count) {
equal_weight_port = portfolio_weights$allocation_equal * initial_capital
bond_heavy_port = portfolio_weights$allocation_bond_heavy * initial_capital
foreign_heavy_port = portfolio_weights$allocation_foreign * initial_capital
for (day_num in 1:days_in_simulation) {
returns = resample(all_returns,1) # Sample returns
# Calculate ending wealth after each day
equal_weight_port = equal_weight_port + equal_weight_port * returns
bond_heavy_port = bond_heavy_port + bond_heavy_port * returns
foreign_heavy_port = foreign_heavy_port + foreign_heavy_port * returns
# Record the wealths for each portfolio at that point in time
equal_weight_wealths[simulation_num,day_num] = sum(equal_weight_port)
bondy_heavy_wealths[simulation_num,day_num] = sum(bond_heavy_port)
foreign_heavy_wealths[simulation_num,day_num] = sum(foreign_heavy_port)
# Re balance each portfolio
equal_weight_port = equal_weight_port + portfolio_weights$allocation_equal
bond_heavy_port = bond_heavy_port + portfolio_weights$allocation_bond_heavy
foreign_heavy_port = foreign_heavy_port + portfolio_weights$allocation_foreign
}
}
# Run the simulation!
# Simulation Parameters
initial_capital = 100000
days_in_simulation = 20
simulation_count = 10000
all_ending_wealths = rep(0,simulation_count)
equal_weight_wealths = matrix(rep(0,days_in_simulation* simulation_count),nrow=simulation_count,ncol=days_in_simulation)
bondy_heavy_wealths = matrix(rep(0,days_in_simulation* simulation_count),nrow=simulation_count,ncol=days_in_simulation)
foreign_heavy_wealths = matrix(rep(0,days_in_simulation* simulation_count),nrow=simulation_count,ncol=days_in_simulation)
for (simulation_num in 1:simulation_count) {
equal_weight_port = portfolio_weights$allocation_equal * initial_capital
bond_heavy_port = portfolio_weights$allocation_bond_heavy * initial_capital
foreign_heavy_port = portfolio_weights$allocation_foreign * initial_capital
for (day_num in 1:days_in_simulation) {
returns = resample(all_returns,1) # Sample returns
# Calculate ending wealth after each day
equal_weight_port = equal_weight_port + equal_weight_port * returns
bond_heavy_port = bond_heavy_port + bond_heavy_port * returns
foreign_heavy_port = foreign_heavy_port + foreign_heavy_port * returns
# Record the wealths for each portfolio at that point in time
equal_weight_wealths[simulation_num,day_num] = sum(equal_weight_port)
bondy_heavy_wealths[simulation_num,day_num] = sum(bond_heavy_port)
foreign_heavy_wealths[simulation_num,day_num] = sum(foreign_heavy_port)
# Re balance each portfolio
equal_weight_port = equal_weight_port + portfolio_weights$allocation_equal
bond_heavy_port = bond_heavy_port + portfolio_weights$allocation_bond_heavy
foreign_heavy_port = foreign_heavy_port + portfolio_weights$allocation_foreign
}
}
View(portfolio_weights)
View(equal_weight_port)
sum(equal_weight_port)
equal_weight_port/sum(equal_weight_port)
# Run the simulation!
# Simulation Parameters
initial_capital = 100000
days_in_simulation = 20
simulation_count = 100
# all_ending_wealths = rep(0,simulation_count) # matrix to store ending wealths
# Create 3 matrices to store the daily wealths of each portfolio
# These will be 10,000 X 20 dim matrices
equal_weight_wealths = matrix(rep(0,days_in_simulation* simulation_count),nrow=simulation_count,ncol=days_in_simulation)
bondy_heavy_wealths = matrix(rep(0,days_in_simulation* simulation_count),nrow=simulation_count,ncol=days_in_simulation)
foreign_heavy_wealths = matrix(rep(0,days_in_simulation* simulation_count),nrow=simulation_count,ncol=days_in_simulation)
for (simulation_num in 1:simulation_count) {
# 3 Vectors containing the dollar value holding of each ETF
equal_weight_port = portfolio_weights$allocation_equal * initial_capital
bond_heavy_port = portfolio_weights$allocation_bond_heavy * initial_capital
foreign_heavy_port = portfolio_weights$allocation_foreign * initial_capital
for (day_num in 1:days_in_simulation) {
returns = resample(all_returns,1) # Sample returns
# Calculate ending wealth after each day
equal_weight_port = equal_weight_port + equal_weight_port * returns
bond_heavy_port = bond_heavy_port + bond_heavy_port * returns
foreign_heavy_port = foreign_heavy_port + foreign_heavy_port * returns
# Record the wealths for each portfolio at that point in time
equal_weight_wealths[simulation_num,day_num] = sum(equal_weight_port)
bondy_heavy_wealths[simulation_num,day_num] = sum(bond_heavy_port)
foreign_heavy_wealths[simulation_num,day_num] = sum(foreign_heavy_port)
# Re balance each portfolio
equal_weight_port = sum(equal_weight_port) * portfolio_weights$allocation_equal
bond_heavy_port = sum(bond_heavy_port) * portfolio_weights$allocation_bond_heavy
foreign_heavy_port = sum(foreign_heavy_port) * portfolio_weights$allocation_foreign
verifify = equal_weight_port/(sum(equal_weight_port)) == portfolio_weights$allocation_equal
print(verifify)
}
}
equal_weight_port/(sum(equal_weight_port)) == portfolio_weights$allocation_equal
bond_allocation
bond_heavy_port
View(equal_weight_wealths)
ggplot(data=equal_weight_wealths,aes(x=V20)) + geom_histogram()
quicky = data.frame(equal_weight_wealths)
quicky
names(quicky))
names(quicky)
View(quicky)
ggplot(data=quicky,aes(x=X20)) + geom_histogram()
hist(equal_weight_wealths[,days_in_simulation])
quicky = data.frame(equal_weight_wealths)
ggplot(data=quicky,aes(x=X20)) + geom_histogram()
hist(equal_weight_wealths[,days_in_simulation])
quicky = data.frame(equal_weight_wealths)
ggplot(data=quicky,aes(x=X20)) + geom_histogram()
hist(equal_weight_wealths[,days_in_simulation], breaks=30)
# Create 3 matrices to store the daily wealths of each portfolio
# These will be 10,000 X 20 dim matrices
equal_weight_wealths = data.frame(matrix(rep(0,days_in_simulation* simulation_count),nrow=simulation_count,ncol=days_in_simulation))
# Run the simulation!
# Simulation Parameters
initial_capital = 100000
days_in_simulation = 20
simulation_count = 10
# all_ending_wealths = rep(0,simulation_count) # matrix to store ending wealths
# Create 3 matrices to store the daily wealths of each portfolio
# These will be 10,000 X 20 dim matrices
equal_weight_wealths = data.frame(matrix(rep(0,days_in_simulation* simulation_count),nrow=simulation_count,ncol=days_in_simulation))
bondy_heavy_wealths = matrix(rep(0,days_in_simulation* simulation_count),nrow=simulation_count,ncol=days_in_simulation)
foreign_heavy_wealths = matrix(rep(0,days_in_simulation* simulation_count),nrow=simulation_count,ncol=days_in_simulation)
for (simulation_num in 1:simulation_count) {
# 3 Vectors containing the dollar value holding of each ETF
equal_weight_port = portfolio_weights$allocation_equal * initial_capital
bond_heavy_port = portfolio_weights$allocation_bond_heavy * initial_capital
foreign_heavy_port = portfolio_weights$allocation_foreign * initial_capital
for (day_num in 1:days_in_simulation) {
returns = resample(all_returns,1) # Sample returns
# Calculate ending wealths after each day
equal_weight_port = equal_weight_port + equal_weight_port * returns
bond_heavy_port = bond_heavy_port + bond_heavy_port * returns
foreign_heavy_port = foreign_heavy_port + foreign_heavy_port * returns
# Record the wealths for each portfolio at that point in time
equal_weight_wealths[simulation_num,day_num] = sum(equal_weight_port)
bondy_heavy_wealths[simulation_num,day_num] = sum(bond_heavy_port)
foreign_heavy_wealths[simulation_num,day_num] = sum(foreign_heavy_port)
# Re balance each portfolio
equal_weight_port = sum(equal_weight_port) * portfolio_weights$allocation_equal
bond_heavy_port = sum(bond_heavy_port) * portfolio_weights$allocation_bond_heavy
foreign_heavy_port = sum(foreign_heavy_port) * portfolio_weights$allocation_foreign
# verifify = equal_weight_port/(sum(equal_weight_port)) == portfolio_weights$allocation_equal
# print(verifify)
}
}
View(equal_weight_wealths)
# Run the simulation!
# Simulation Parameters
initial_capital = 100000
days_in_simulation = 20
simulation_count = 10
# all_ending_wealths = rep(0,simulation_count) # matrix to store ending wealths
# Create 3 matrices to store the daily wealths of each portfolio
# These will be 10,000 X 20 dim matrices
equal_weight_wealths = data.frame(matrix(rep(0,days_in_simulation* simulation_count),nrow=simulation_count,ncol=days_in_simulation))
bondy_heavy_wealths = data.frame(matrix(rep(0,days_in_simulation* simulation_count),nrow=simulation_count,ncol=days_in_simulation))
foreign_heavy_wealths = data.frame(matrix(rep(0,days_in_simulation* simulation_count),nrow=simulation_count,ncol=days_in_simulation))
for (simulation_num in 1:simulation_count) {
# 3 Vectors containing the dollar value holding of each ETF
equal_weight_port = portfolio_weights$allocation_equal * initial_capital
bond_heavy_port = portfolio_weights$allocation_bond_heavy * initial_capital
foreign_heavy_port = portfolio_weights$allocation_foreign * initial_capital
for (day_num in 1:days_in_simulation) {
returns = resample(all_returns,1) # Sample returns
# Calculate ending wealths after each day
equal_weight_port = equal_weight_port + equal_weight_port * returns
bond_heavy_port = bond_heavy_port + bond_heavy_port * returns
foreign_heavy_port = foreign_heavy_port + foreign_heavy_port * returns
# Record the wealths for each portfolio at that point in time
equal_weight_wealths[simulation_num,day_num] = sum(equal_weight_port)
bondy_heavy_wealths[simulation_num,day_num] = sum(bond_heavy_port)
foreign_heavy_wealths[simulation_num,day_num] = sum(foreign_heavy_port)
# Re balance each portfolio
equal_weight_port = sum(equal_weight_port) * portfolio_weights$allocation_equal
bond_heavy_port = sum(bond_heavy_port) * portfolio_weights$allocation_bond_heavy
foreign_heavy_port = sum(foreign_heavy_port) * portfolio_weights$allocation_foreign
# verifify = equal_weight_port/(sum(equal_weight_port)) == portfolio_weights$allocation_equal
# print(verifify)
}
}
# Run the simulation!
# Simulation Parameters
initial_capital = 100000
days_in_simulation = 20
simulation_count = 10000
# all_ending_wealths = rep(0,simulation_count) # matrix to store ending wealths
# Create 3 matrices to store the daily wealths of each portfolio
# These will be 10,000 X 20 dim matrices
equal_weight_wealths = data.frame(matrix(rep(0,days_in_simulation* simulation_count),nrow=simulation_count,ncol=days_in_simulation))
bondy_heavy_wealths = data.frame(matrix(rep(0,days_in_simulation* simulation_count),nrow=simulation_count,ncol=days_in_simulation))
foreign_heavy_wealths = data.frame(matrix(rep(0,days_in_simulation* simulation_count),nrow=simulation_count,ncol=days_in_simulation))
for (simulation_num in 1:simulation_count) {
# 3 Vectors containing the dollar value holding of each ETF
equal_weight_port = portfolio_weights$allocation_equal * initial_capital
bond_heavy_port = portfolio_weights$allocation_bond_heavy * initial_capital
foreign_heavy_port = portfolio_weights$allocation_foreign * initial_capital
for (day_num in 1:days_in_simulation) {
returns = resample(all_returns,1) # Sample returns
# Calculate ending wealths after each day
equal_weight_port = equal_weight_port + equal_weight_port * returns
bond_heavy_port = bond_heavy_port + bond_heavy_port * returns
foreign_heavy_port = foreign_heavy_port + foreign_heavy_port * returns
# Record the wealths for each portfolio at that point in time
equal_weight_wealths[simulation_num,day_num] = sum(equal_weight_port)
bondy_heavy_wealths[simulation_num,day_num] = sum(bond_heavy_port)
foreign_heavy_wealths[simulation_num,day_num] = sum(foreign_heavy_port)
# Re balance each portfolio
equal_weight_port = sum(equal_weight_port) * portfolio_weights$allocation_equal
bond_heavy_port = sum(bond_heavy_port) * portfolio_weights$allocation_bond_heavy
foreign_heavy_port = sum(foreign_heavy_port) * portfolio_weights$allocation_foreign
# verifify = equal_weight_port/(sum(equal_weight_port)) == portfolio_weights$allocation_equal
# print(verifify)
}
}
ggplot(data=quicky,aes(x=X20)) + geom_histogram() +
hist(equal_weight_wealths[,days_in_simulation], breaks=30)
ggplot(data=quicky,aes(x=X20)) + geom_histogram()
hist(equal_weight_wealths[,days_in_simulation], breaks=30)
ggplot(data=quicky,aes(x=X20)) + geom_histogram()
ggplot(data=equal_weight_wealths,aes(x=X20)) + geom_histogram()
hist(equal_weight_wealths[,days_in_simulation], breaks=30)
ggplot(data=equal_weight_wealths,aes(x=X20)) + geom_histogram(fill='white')
ggplot(data=equal_weight_wealths,aes(x=X20)) + geom_histogram(fill='white', color='black')
bondy_heavy_wealths
bondy_heavy_wealths$port = 'Bond-Heavy'
bondy_heavy_wealths
foreign_heavy_wealths$port = 'Foreign-Heavy'
foreign_heavy_wealths
rbind(foreign_heavy_wealths,bond_heavy_port)
x = rbind(foreign_heavy_wealths,bond_heavy_port)
View(x)
?rbind
x = rbind(foreign_heavy_wealths,bond_heavy_port)
bond_heavy_port
x = rbind(foreign_heavy_wealths,bond_heavy_wealths)
x = rbind(foreign_heavy_wealths,bond_heavy_wealths)
# Run the simulation!
# Simulation Parameters
initial_capital = 100000
days_in_simulation = 20
simulation_count = 10000
# all_ending_wealths = rep(0,simulation_count) # matrix to store ending wealths
# Create 3 matrices to store the daily wealths of each portfolio
# These will be 10,000 X 20 dim matrices
equal_weight_wealths = data.frame(matrix(rep(0,days_in_simulation* simulation_count),nrow=simulation_count,ncol=days_in_simulation))
bondy_heavy_wealths = data.frame(matrix(rep(0,days_in_simulation* simulation_count),nrow=simulation_count,ncol=days_in_simulation))
foreign_heavy_wealths = data.frame(matrix(rep(0,days_in_simulation* simulation_count),nrow=simulation_count,ncol=days_in_simulation))
for (simulation_num in 1:simulation_count) {
# 3 Vectors containing the dollar value holding of each ETF
equal_weight_port = portfolio_weights$allocation_equal * initial_capital
bond_heavy_port = portfolio_weights$allocation_bond_heavy * initial_capital
foreign_heavy_port = portfolio_weights$allocation_foreign * initial_capital
for (day_num in 1:days_in_simulation) {
returns = resample(all_returns,1) # Sample returns
# Calculate ending wealths after each day
equal_weight_port = equal_weight_port + equal_weight_port * returns
bond_heavy_port = bond_heavy_port + bond_heavy_port * returns
foreign_heavy_port = foreign_heavy_port + foreign_heavy_port * returns
# Record the wealths for each portfolio at that point in time
equal_weight_wealths[simulation_num,day_num] = sum(equal_weight_port)
bondy_heavy_wealths[simulation_num,day_num] = sum(bond_heavy_port)
foreign_heavy_wealths[simulation_num,day_num] = sum(foreign_heavy_port)
# Re balance each portfolio
equal_weight_port = sum(equal_weight_port) * portfolio_weights$allocation_equal
bond_heavy_port = sum(bond_heavy_port) * portfolio_weights$allocation_bond_heavy
foreign_heavy_port = sum(foreign_heavy_port) * portfolio_weights$allocation_foreign
# verifify = equal_weight_port/(sum(equal_weight_port)) == portfolio_weights$allocation_equal
# print(verifify)
}
}
all_ending_wealths = rbind(foreign_heavy_wealths,bondy_heavy_wealths)
View(all_ending_wealths)
equal_weight_wealths$Type = 'Equal Weight'
foreign_heavy_wealths$Type = 'Foreign Heavyt'
bondy_heavy_wealths$Type = 'Bondy Heavy'
all_ending_wealths = rbind(equal_weight_wealths,bondy_heavy_wealths)
all_ending_wealths = rbind(all_ending_wealths,foreign_heavy_wealths)
all_ending_wealths = rbind(equal_weight_wealths,bondy_heavy_wealths)
all_ending_wealths = rbind(all_ending_wealths,foreign_heavy_wealths)
knitr::opts_chunk$set(echo = FALSE)
# output:
#   md_document:
#     variant: markdown_github
# Load libraries
library(readr)
library(dplyr)
library(tidyverse)
library(ggcorrplot)
library(moments)
library(mosaic)
library(quantmod)
library(foreach)
# Load data from web
# Get ETs
my_etfs = c("ARKK", "SDY", "GOVT",'BNO','EWJ','XLF','MCHI','HYG')
etf_count = length(my_etfs) # Need this later
# 5 years of data
getSymbols(my_etfs,from='2016-8-1')
# We want to look at adjusted values only
for(ticker in my_etfs) {
expr = paste0(ticker, "a = adjustOHLC(", ticker, ")")
eval(parse(text=expr))
}
my_etfs_adjusted = paste(my_etfs,'a',sep = '')
all_returns = cbind( ClCl(ARKKa),
ClCl(SDYa),
ClCl(XLFa),
ClCl(GOVTa),
ClCl(HYGa),
ClCl(EWJa),
ClCl(MCHIa),
ClCl(BNOa))
all_returns = as.matrix(na.omit(all_returns))
# Create 3 portfolios.
# Equal weighted /no opinion portfolio
allocation_equal = rep(1/etf_count,etf_count)
# Create bond allocation. 80% in two bond funds. Equal weight placed in the remaining
bond_allocation = .8
non_bond = (1-bond_allocation)/6
allocation_bond_heavy = rep(non_bond,etf_count)
allocation_bond_heavy[c(4,5)] = bond_allocation/2
# Foreign Heavy
foreign_allocation = .8
non_foreign = (1-foreign_allocation)/6
allocation_foreign = rep(non_foreign,etf_count)
allocation_foreign[c(6,7)] = foreign_allocation/3
# Compile three portfolios in a matrix
portfolio_weights = as.data.frame(cbind(allocation_equal,allocation_bond_heavy,allocation_foreign))
# Make sure each of the allocations sum to one
colSums(portfolio_weights) == 1
# Run the simulation!
# Simulation Parameters
initial_capital = 100000
days_in_simulation = 20
simulation_count = 1000
# all_ending_wealths = rep(0,simulation_count) # matrix to store ending wealths
# Create 3 matrices to store the daily wealths of each portfolio
# These will be 10,000 X 20 dim matrices
equal_weight_wealths = data.frame(matrix(rep(0,days_in_simulation* simulation_count),nrow=simulation_count,ncol=days_in_simulation))
bondy_heavy_wealths = data.frame(matrix(rep(0,days_in_simulation* simulation_count),nrow=simulation_count,ncol=days_in_simulation))
foreign_heavy_wealths = data.frame(matrix(rep(0,days_in_simulation* simulation_count),nrow=simulation_count,ncol=days_in_simulation))
for (simulation_num in 1:simulation_count) {
# 3 Vectors containing the dollar value holding of each ETF
equal_weight_port = portfolio_weights$allocation_equal * initial_capital
bond_heavy_port = portfolio_weights$allocation_bond_heavy * initial_capital
foreign_heavy_port = portfolio_weights$allocation_foreign * initial_capital
for (day_num in 1:days_in_simulation) {
returns = resample(all_returns,1) # Sample returns
# Calculate ending wealths after each day
equal_weight_port = equal_weight_port + equal_weight_port * returns
bond_heavy_port = bond_heavy_port + bond_heavy_port * returns
foreign_heavy_port = foreign_heavy_port + foreign_heavy_port * returns
# Record the wealths for each portfolio at that point in time
equal_weight_wealths[simulation_num,day_num] = sum(equal_weight_port)
bondy_heavy_wealths[simulation_num,day_num] = sum(bond_heavy_port)
foreign_heavy_wealths[simulation_num,day_num] = sum(foreign_heavy_port)
# Re balance each portfolio
equal_weight_port = sum(equal_weight_port) * portfolio_weights$allocation_equal
bond_heavy_port = sum(bond_heavy_port) * portfolio_weights$allocation_bond_heavy
foreign_heavy_port = sum(foreign_heavy_port) * portfolio_weights$allocation_foreign
# verifify = equal_weight_port/(sum(equal_weight_port)) == portfolio_weights$allocation_equal
# print(verifify)
}
}
equal_weight_wealths$Type = 'Equal Weight'
foreign_heavy_wealths$Type = 'Foreign Heavyt'
bondy_heavy_wealths$Type = 'Bondy Heavy'
all_ending_wealths = rbind(equal_weight_wealths,bondy_heavy_wealths)
all_ending_wealths = rbind(all_ending_wealths,foreign_heavy_wealths)
all_ending_wealths %>% filter(Type='Equal Weight') %>%   ggplot(aes(x=X20)) + geom_histogram(fill='white', color='black')
View(all_ending_wealths)
equal_weight_wealths$Type = 'Equal Weight'
foreign_heavy_wealths$Type = 'Foreign Heavy'
bondy_heavy_wealths$Type = 'Bondy Heavy'
all_ending_wealths = rbind(equal_weight_wealths,bondy_heavy_wealths)
all_ending_wealths = rbind(all_ending_wealths,foreign_heavy_wealths)
all_ending_wealths %>% filter(Type=='Equal Weight') %>%   ggplot(aes(x=X20)) + geom_histogram(fill='white', color='black')
hist(equal_weight_wealths[,days_in_simulation], breaks=30)
all_ending_wealths %>%  ggplot(aes(x=X20)) + geom_histogram(fill='white', color='black') + facet_grid(Type ~.)
View(foreign_heavy_wealths)
View(MCHIa)
View(portfolio_weights)
View(foreign_heavy_wealths)
source("~/.active-rstudio-document", echo=TRUE)
View(foreign_heavy_wealths)
debugSource("C:/Users/User/OneDrive/Desktop/Machine Learning/Machine-Learning/dlete_me.R", echo=TRUE)
View(portfolio_weights)
# Create 3 portfolios.
# Equal weighted /no opinion portfolio
allocation_equal = rep(1/etf_count,etf_count)
# Create bond allocation. 80% in two bond funds. Equal weight placed in the remaining
bond_allocation = .8
non_bond = (1-bond_allocation)/6
allocation_bond_heavy = rep(non_bond,etf_count)
allocation_bond_heavy[c(4,5)] = bond_allocation/2
# Foreign Heavy
foreign_allocation = .8
non_foreign = (1-foreign_allocation)/6
allocation_foreign = rep(non_foreign,etf_count)
allocation_foreign[c(6,7)] = foreign_allocation/2
# Compile three portfolios in a matrix
portfolio_weights = as.data.frame(cbind(allocation_equal,allocation_bond_heavy,allocation_foreign))
# Make sure each of the allocations sum to one
colSums(portfolio_weights) == 1
# Run the simulation!
# Simulation Parameters
initial_capital = 100000
days_in_simulation = 20
simulation_count = 1000
# all_ending_wealths = rep(0,simulation_count) # matrix to store ending wealths
# Create 3 matrices to store the daily wealths of each portfolio
# These will be 10,000 X 20 dim matrices
equal_weight_wealths = data.frame(matrix(rep(0,days_in_simulation* simulation_count),nrow=simulation_count,ncol=days_in_simulation))
bondy_heavy_wealths = data.frame(matrix(rep(0,days_in_simulation* simulation_count),nrow=simulation_count,ncol=days_in_simulation))
foreign_heavy_wealths = data.frame(matrix(rep(0,days_in_simulation* simulation_count),nrow=simulation_count,ncol=days_in_simulation))
for (simulation_num in 1:simulation_count) {
# 3 Vectors containing the dollar value holding of each ETF
equal_weight_port = portfolio_weights$allocation_equal * initial_capital
bond_heavy_port = portfolio_weights$allocation_bond_heavy * initial_capital
foreign_heavy_port = portfolio_weights$allocation_foreign * initial_capital
for (day_num in 1:days_in_simulation) {
returns = resample(all_returns,1) # Sample returns
# Calculate ending wealths after each day
equal_weight_port = equal_weight_port + equal_weight_port * returns
bond_heavy_port = bond_heavy_port + bond_heavy_port * returns
foreign_heavy_port = foreign_heavy_port + foreign_heavy_port * returns
# Record the wealths for each portfolio at that point in time
equal_weight_wealths[simulation_num,day_num] = sum(equal_weight_port)
bondy_heavy_wealths[simulation_num,day_num] = sum(bond_heavy_port)
foreign_heavy_wealths[simulation_num,day_num] = sum(foreign_heavy_port)
# Re balance each portfolio
equal_weight_port = sum(equal_weight_port) * portfolio_weights$allocation_equal
bond_heavy_port = sum(bond_heavy_port) * portfolio_weights$allocation_bond_heavy
foreign_heavy_port = sum(foreign_heavy_port) * portfolio_weights$allocation_foreign
# verifify = equal_weight_port/(sum(equal_weight_port)) == portfolio_weights$allocation_equal
# print(verifify)
}
}
equal_weight_wealths$Type = 'Equal Weight'
foreign_heavy_wealths$Type = 'Foreign Heavy'
bondy_heavy_wealths$Type = 'Bondy Heavy'
all_ending_wealths = rbind(equal_weight_wealths,bondy_heavy_wealths)
all_ending_wealths = rbind(all_ending_wealths,foreign_heavy_wealths)
# all_ending_wealths %>% filter(Type=='Equal Weight') %>%  ggplot(aes(x=X20)) + geom_histogram(fill='white', color='black')
# hist(equal_weight_wealths[,days_in_simulation], breaks=30)
all_ending_wealths %>%  ggplot(aes(x=X20)) + geom_histogram(fill='white', color='black') + facet_grid(Type ~.)
all_ending_wealths %>%  ggplot(aes(x=X20)) + geom_histogram(fill='white', color='black') + facet_grid(Type ~.,scales = 'free')
all_ending_wealths %>%  ggplot(aes(x=X20,fill=Type)) + geom_histogram(position = ='identity',alpha=.4) + facet_grid(Type ~.,scales = 'free')
all_ending_wealths %>%  ggplot(aes(x=X20,fill=Type)) + geom_histogram(position ='identity',alpha=.4) + facet_grid(Type ~.,scales = 'free')
all_ending_wealths %>%  ggplot(aes(x=X20,fill=Type)) + geom_histogram(position ='identity',alpha=.4)
all_ending_wealths %>%  ggplot(aes(x=X20)) + geom_histogram(fill='white', color='black') + facet_grid(Type ~.,scales = 'free') +
geom_vline(xintercept = 100000)
all_ending_wealths %>% filter(Type=='Equal Weight') %>%  ggplot(aes(x=X20)) + geom_histogram(fill='white', color='black')+
geom_vline(xintercept = 100000)
all_ending_wealths %>% filter(Type=='Equal Weight') %>%  ggplot(aes(x=X20)) + geom_histogram(fill='white', color='black')+
geom_vline(xintercept = 100000, size=4,color='blue')
all_ending_wealths %>% filter(Type=='Equal Weight') %>%  ggplot(aes(x=X20)) + geom_histogram(fill='white', color='black')+
geom_vline(xintercept = 100000, size=2,color='blue')
all_ending_wealths %>%  ggplot(aes(x=X20)) + geom_histogram(fill='white', color='black') + facet_grid(Type ~.,scales = 'free') +
geom_vline(xintercept = 100000, size=2,color='blue')
all_ending_wealths %>%  ggplot(aes(x=X20)) + geom_histogram(fill='white', color='black') + facet_grid(Type ~.,scales = 'free') +
geom_vline(xintercept = 100000, size=1,color='blue')
hist(equal_weight_wealths[,days_in_simulation], breaks=30)
equal_weight_wealths$Type = 'Equal Weight'
foreign_heavy_wealths$Type = 'Foreign Heavy'
bondy_heavy_wealths$Type = 'Bondy Heavy'
all_ending_wealths = rbind(equal_weight_wealths,bondy_heavy_wealths)
all_ending_wealths = rbind(all_ending_wealths,foreign_heavy_wealths)
# hist(equal_weight_wealths[,days_in_simulation], breaks=30)
all_ending_wealths %>% filter(Type=='Equal Weight') %>%  ggplot(aes(x=X20)) + geom_histogram(fill='white', color='black')+
geom_vline(xintercept = 100000, size=2,color='blue')
all_ending_wealths %>%  ggplot(aes(x=X20)) + geom_histogram(fill='white', color='black') + facet_grid(Type ~.,scales = 'free') +
geom_vline(xintercept = 100000, size=1,color='blue')
# all_ending_wealths %>%  ggplot(aes(x=X20,fill=Type)) + geom_histogram(position ='identity',alpha=.4) + facet_grid(Type ~.,scales = 'free')
# all_ending_wealths %>%  ggplot(aes(x=X20,fill=Type)) + geom_histogram(position ='identity',alpha=.4) + facet_grid(Type ~.,scales = 'free')
